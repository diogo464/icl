options {
	STATIC = false;
	LOOKAHEAD = 2;
}

PARSER_BEGIN(CalcParser)
package icl.stages.parser;
import icl.ast.*;
import icl.*;

import java.util.ArrayList;

public class CalcParser {

}

PARSER_END(CalcParser)

SKIP :
{
	" " | "\t" | "\r" | "\n"
}

TOKEN :
{
	< KW_LET	: "let"												> |
	< KW_IF		: "if"												> |
	< KW_ELSE	: "else"											> |
	< KW_WHILE	: "while"											> |
	< KW_MUT	: "mut"												> |
	< KW_TRUE	: "true"											> |
	< KW_FALSE	: "false"											> |
	< KW_FN		: "fn"												> |
	< KW_STRUCT	: "struct"											> |
	< KW_PRINT	: "print"											> |
	< KW_PRINTLN: "println"											> |
	< KW_NEW	: "new"												> |
	< TYPE_INT	: "int"												> |
	< TYPE_BOOL	: "bool"											> |
	< TYPE_STR	: "str"												> |
	< TYPE_VOID	: "void"											> |
	< IDENT		: (["a"-"z", "A"-"Z"](["a"-"z","A"-"Z","0"-"9"])*)	> |
	< NUM		: ((["0"-"9"])+)									> |
	< STRLIT	: "\"" (("\\" ("\\" | "n" | "r" | "\"")) | (~["\\", "\"", "\n", "\r"]))* "\"" > |
	< MULTIAMP	: (["&"])+											> |
	< COMMA		: "," 												> |
	< PLUS		: "+" 												> |
	< MINUS		: "-" 												> |
	< MUL		: "*" 												> |
	< DIV		: "/" 												> |
	< LPAREN	: "("												> |
	< RPAREN	: ")"												> |
	< LBRACK	: "{"												> |
	< RBRACK	: "}"												> |
	< COL		: ":"												> |
	< SEMICOL	: ";"												> |
	< EQ		: "="												> |
	< CMP		: "=="												> |
	< GT		: ">"												> |
	< GTE		: ">="												> |
	< LT		: "<"												> |
	< LTE		: "<="												> |
	< LAND		: "&&"												> |
	< LOR		: "||"												> |
	< LNOT		: "~"												> |
	< DEREF		: "!"												> |
	< ASSIGN	: ":="												> |
	< ARROW		: "->"												>
}

AstNode Start():
{ var t = (AstNode) null; }
{
	t = Expr() <SEMICOL> <SEMICOL>
	{ return t; }
}

AstNode Stmt():
{ AstNode n; }
{
	(n = StmtAssign() | n = StmtDecl() | n = StmtWhile() | n = StmtPrint())
	{ return n; }
}

AstNode Expr():
{ 
	var n 			= (AstNode) null; 
	var argument 	= (AstNode) null;
	var arguments 	= new ArrayList<AstNode>();
	var endToken 	= (Token) null;
}
{
	(n = ExprBlock() | n = ExprLOr() | n = ExprIf())
	(<LPAREN>
		(argument = Expr() {arguments.add(argument);})
		(<COMMA> argument = Expr() {arguments.add(argument);})*
	endToken = <RPAREN> {return Parser.astCall(Parser.span(n, endToken), n, arguments); })?
	{ return n; }
}

AstNode StmtAssign():
{
	var name 		= (Token) null;	
	var exp	 		= (AstNode) null;
	var endToken 	= (Token) null;
}
{
	(name = <IDENT>) <ASSIGN> (exp = Expr()) (endToken = <SEMICOL>)
	{ return Parser.astAssign(Parser.span(name, endToken), name.image, exp); }
}

AstNode StmtDecl():
{
	var beginToken 	= (Token) null;
	var endToken 	= (Token) null;
	var mut 		= (Token) null;
	var ident 		= (Token) null;
	ValueType type 	= null;
	AstNode exp 	= null;
}
{
	(beginToken = <KW_LET>) (mut = <KW_MUT>)? (ident = <IDENT>) (<COL> type = ValueType())? <EQ> (exp = Expr()) (endToken = <SEMICOL>)
	{ return Parser.astDecl(Parser.span(beginToken, endToken), ident.image, exp, mut != null); }
}

AstNode StmtWhile():
{
	var beginToken 	= (Token) null;
	var endToken 	= (Token) null;
	var condition 	= (AstNode) null;
	var body 		= (AstNode) null;
}
{
	(beginToken = <KW_WHILE>) (condition = Expr()) (body = ExprBlock())? (endToken = <SEMICOL>)
	{ if (body == null) { body = Parser.astEmptyNode(Parser.span(endToken)); } }
	{ return Parser.astLoop(Parser.span(beginToken, endToken), condition, body); }
}

AstNode StmtPrint():
{
	var n 			= (Token) null;
	var endToken 	= (Token) null;
	var expr 		= (AstNode) null;
}
{
	(n = <KW_PRINT> | n = <KW_PRINTLN>) (expr = Expr())? (endToken = <SEMICOL>)
	{ if (expr == null) { expr = Parser.astEmptyNode(Parser.span(endToken)); } }
	{ return Parser.astPrint(Parser.span(n, endToken), expr); }
}

AstNode ExprIf():
{
	var beginToken 		= (Token) null;
	var conditionals 	= new ArrayList<AstIf.Conditional>();
	var fallthrough 	= (AstNode) null;
	var condition		= (AstNode) null;
	var expression 		= (AstNode) null;
}
{
	(beginToken = <KW_IF>) (condition = Expr()) (expression = ExprBlock())
	{ conditionals.add(Parser.astIfConditional(condition, expression)); }
	(<KW_ELSE> <KW_IF> (condition = Expr()) (expression = ExprBlock()) {conditionals.add(Parser.astIfConditional(condition, expression));})*
	(<KW_ELSE> fallthrough = ExprBlock())?
	{ if( fallthrough == null) { fallthrough = Parser.astEmptyNode(Parser.span(expression)); } }
	{ return Parser.astIf(Parser.span(beginToken, fallthrough), conditionals, fallthrough); }
}

AstNode ExprBlock():
{ 
	var beginToken 	= (Token) null;
	var endToken 	= (Token) null;
	var stmt 		= (AstNode) null;
	var body 		= (AstNode) null;
	var stmts 		= new ArrayList<AstNode>();
}
{
	( 
		(beginToken = <LBRACK>)
			(stmt = Stmt() { stmts.add(stmt); })*
			(body = Expr())?
		(endToken = <RBRACK>)
	)
	{ 
		if( body == null )
			body = Parser.astEmptyNode(Parser.span(endToken));
		return Parser.astScope(Parser.span(beginToken, endToken), stmts, body);
	}
}

AstNode ExprLOr():
{
	var op 	= (Token) null;
	var l 	= (AstNode) null;
	var r 	= (AstNode) null;
}
{
	l = ExprLAnd() ( 
		(op = <LOR>) r = ExprLAnd()
		{ 
			if( op != null ) {
				l = Parser.astBinOp(AstBinOp.Kind.LOR, l, r);
			}
		}
	)*
	{ return l; }	
}

AstNode ExprLAnd():
{
	var op 	= (Token) null;
	var l 	= (AstNode) null;
	var r 	= (AstNode) null;
}
{
	l = ExprCmp() ( 
		(op = <MULTIAMP>) r = ExprCmp()
		{ 
			if( op != null && op.image.length() == 2 ) {
				l = Parser.astBinOp(AstBinOp.Kind.LAND, l, r);
			}
		}
	)*
	{ return l; }
}

AstNode ExprCmp():
{
	var op 	= (Token) null;
	var l 	= (AstNode) null;
	var r 	= (AstNode) null;
}
{
	l = ExprRel() ( 
		(op = <CMP>) r = ExprRel()
		{ 
			if( op != null ) {
				l = Parser.astBinOp(AstBinOp.Kind.CMP, l, r);
			}
		}
	)*
	{ return l; }
}

AstNode ExprRel():
{
	var op 	= (Token) null;
	var l 	= (AstNode) null;
	var r 	= (AstNode) null;
}
{
	l = ExprAddSub() ( 
		(op = <GT> | op = <GTE> | op = <LT> | op = <LTE>) r = ExprAddSub()
		{ 
			if( op != null ) {
				if( op.kind == GT ) { l = Parser.astBinOp(AstBinOp.Kind.GT, l, r);}
				else if( op.kind == GTE ) { l = Parser.astBinOp(AstBinOp.Kind.GTE, l, r); }
				else if( op.kind == LT ) { l = Parser.astBinOp(AstBinOp.Kind.LT, l, r); }
				else if( op.kind == LTE ) { l = Parser.astBinOp(AstBinOp.Kind.LTE, l, r); }
			}
		}
	)*
	{ return l; }
}

AstNode ExprAddSub():
{ 
	var op 	= (Token) null;
	var l 	= (AstNode) null;
	var r 	= (AstNode) null;
}
{
	l = ExprMulDiv() ( 
		(op = <PLUS> | op = <MINUS>) r = ExprMulDiv()
		{ 
			if( op != null ) {
				if( op.kind == PLUS ) { l = Parser.astBinOp(AstBinOp.Kind.ADD, l, r); }
				else { l = Parser.astBinOp(AstBinOp.Kind.SUB, l, r); }
			}
		}
	)*
	{ return l; }	
}

AstNode ExprMulDiv():
{
	var op 	= (Token) null;
	var l 	= (AstNode) null;
	var r 	= (AstNode) null;
}
{
	l = ExprUnary() ( 
		(op = <MUL> | op = <DIV>) r = ExprUnary()
		{
				if( op.kind == MUL ) { l = Parser.astBinOp(AstBinOp.Kind.MUL, l, r); }
				else { l = Parser.astBinOp(AstBinOp.Kind.DIV, l, r); }
		}
	)*
	{ return l; }
}

AstNode ExprUnary():
{ 
	var n 	= (Token) null;
	var e 	= (AstNode) null;
	var k 	= (ArrayList<AstUnaryOp.Kind>) null;
	var t 	= (AstNode) null;
}
{
	( 
		(
			n = <PLUS> | n = <MINUS> | n = <LNOT> | n = <DEREF>
			{ 
			if ( k == null ) { k = new ArrayList<>(); }
			if ( n.kind == PLUS ) { k.add(AstUnaryOp.Kind.POS); }
			else if ( n.kind == MINUS ) { k.add(AstUnaryOp.Kind.NEG); }
			else if ( n.kind == LNOT ) { k.add(AstUnaryOp.Kind.LNOT); }
			else if ( n.kind == DEREF ) { k.add(AstUnaryOp.Kind.DEREF); }
			}
		)* 
		t = ExprLitParenCall() 
	)
	{
		if( k == null ) {
			return t;
		}else {
			AstNode tmp = t;
			for( var kind : k )
				tmp = Parser.astUnaryOp(kind, tmp);
			return tmp;
		}
	}
}

AstNode ExprLitParenCall():
{
	var n 			= (Token) null;
	var t 			= (AstNode) null;
	var arguments 	= new ArrayList<AstNode>();
	var argument 	= (AstNode) null;
}
{
	( 
		n = <NUM> { return Parser.astNum(Parser.span(n), n.image); } 			|
		n = <KW_TRUE> { return Parser.astBool(Parser.span(n), n.image); }		|
		n = <KW_FALSE> { return Parser.astBool(Parser.span(n), n.image); }		|
		n = <IDENT> { return Parser.astVar(Parser.span(n), n.image); }			|
		n = <STRLIT> { return Parser.astStr(Parser.span(n), n.image); } 		|
		n = <KW_NEW> t = Expr() { return Parser.astNew(Parser.span(n), t); } 	|
		t = ExprFn() { return t; }												|
		<LPAREN> t = Expr() <RPAREN> { return t; }
	)
}

AstNode ExprFn():
{
	var beginToken 	= (Token) null;
	var name 		= (Token) null;
	var type	 	= (ValueType) null;
	var args 		= new ArrayList<AstFn.Arg>();
	var body  		= (AstNode) null;
}
{
	beginToken = <KW_FN> <LPAREN>
		(
			name = <IDENT> <COL> type = ValueType() { args.add(new AstFn.Arg(name.image, type)); }
			(<COMMA> name = <IDENT> <COL> type = ValueType() { args.add(new AstFn.Arg(name.image, type)); })*
		)?
	{ type = null; }
	<RPAREN> (<ARROW> type = ValueType())? body = ExprBlock()
	{ return Parser.astFn(Parser.span(beginToken, body), args, type, body); }
}

ValueType ValueType():
{
	var n 			= (Token) null;
	var type 		= (ValueType) null;
	var arguments 	= new ArrayList<ValueType>();
	var returntype 	= (ValueType) null;
}
{
	<TYPE_INT> { return ValueType.createNumber(); } 	|
	<TYPE_BOOL> { return ValueType.createBoolean(); } 	|
	<TYPE_STR> { return ValueType.createString(); } 	|
	<TYPE_VOID> { return ValueType.createVoid(); } 		|
	n = <MULTIAMP> type = ValueType() 
		{
			ValueType ref = type;
			for(var i = 0; i < n.image.length(); ++i)
				ref = ValueType.createReference(ref);
			type = ref;
			return type;
		} |
	<KW_FN> <LPAREN> 
		(
			type = ValueType() {arguments.add(type);}
			(<COMMA> type = ValueType() {arguments.add(type);})*
		)?
	<RPAREN> (<ARROW> returntype = ValueType())?
		{ return ValueType.createFunction(arguments, returntype); }
}
