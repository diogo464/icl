options {
	STATIC = false;
	LOOKAHEAD = 2;
}

PARSER_BEGIN(CalcParser)
package icl.stages.parser;
import icl.ast.*;
import icl.*;

import java.util.ArrayList;

public class CalcParser {

}

PARSER_END(CalcParser)

SKIP :
{
	" " | "\t" | "\r" | "\n"
}

TOKEN :
{
	< KW_LET	: "let"												> |
	< KW_IF		: "if"												> |
	< KW_ELSE	: "else"											> |
	< KW_WHILE	: "while"											> |
	< KW_MUT	: "mut"												> |
	< KW_TRUE	: "true"											> |
	< KW_FALSE	: "false"											> |
	< KW_FN		: "fn"												> |
	< KW_STRUCT	: "struct"											> |
	< KW_PRINT	: "print"											> |
	< KW_PRINTLN: "println"											> |
	< KW_NEW	: "new"												> |
	< KW_TYPE	: "type"											> |
	< TYPE_NUM	: "number"											> |
	< TYPE_BOOL	: "bool"											> |
	< TYPE_STR	: "str"												> |
	< TYPE_VOID	: "void"											> |
	< IDENT		: (["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","0"-"9","_"])*) > |
	< BUILTIN	: (["$"](["a"-"z","A"-"Z","0"-"9","_"])*) 			> |
	< NUM		: (["0"-"9"](["0"-"9","."])*)						> |
	< STRLIT	: "\"" (("\\" ("\\" | "n" | "r" | "\"")) | (~["\\", "\"", "\n", "\r"]))* "\"" > |
	< MULTIAMP	: (["&"])+											> |
	< DOT 		: "."												> |
	< COMMA		: "," 												> |
	< PLUS		: "+" 												> |
	< MINUS		: "-" 												> |
	< MUL		: "*" 												> |
	< DIV		: "/" 												> |
	< LPAREN	: "("												> |
	< RPAREN	: ")"												> |
	< LBRACK	: "{"												> |
	< RBRACK	: "}"												> |
	< COL		: ":"												> |
	< SEMICOL	: ";"												> |
	< EQ		: "="												> |
	< CMP		: "=="												> |
	< NCMP		: "~="												> |
	< GT		: ">"												> |
	< GTE		: ">="												> |
	< LT		: "<"												> |
	< LTE		: "<="												> |
	< LAND		: "&&"												> |
	< LOR		: "||"												> |
	< LNOT		: "~"												> |
	< DEREF		: "!"												> |
	< ASSIGN	: ":="												> |
	< ARROW		: "->"												>
}

AstNode Start():
{ var t = (AstNode) null; }
{
	t = Expr() <SEMICOL> <SEMICOL>
	{ return t; }
}

AstNode Expr():
{ 
	var n 			= (AstNode) null; 
}
{
	(
		n = ExprBlock() 	|
		n = ExprAssign()	|
		n = ExprLOr() 		|
		n = ExprIf()		|
		n = ExprDecl()		|
		n = ExprWhile()		|
		n = ExprPrint()		|
		n = ExprTypeAlias()
	)
	{ return n; }
}

AstNode ExprAssign():
{
	var name 		= (Token) null;	
	var exp	 		= (AstNode) null;
}
{
	(name = <IDENT>) <ASSIGN> (exp = Expr())
	{ return Parser.astAssign(Parser.span(name, exp), name.image, exp); }
}

AstNode ExprDecl():
{
	var beginToken 	= (Token) null;
	var mut 		= (Token) null;
	var ident 		= (Token) null;
	ValueType type 	= null;
	AstNode exp 	= null;
}
{
	(beginToken = <KW_LET>) (mut = <KW_MUT>)? (ident = <IDENT>) (<COL> type = ValueType())? <EQ> (exp = Expr())
	{ return Parser.astDecl(Parser.span(beginToken, exp), ident.image, exp, mut != null, type); }
}

AstNode ExprWhile():
{
	var beginToken 	= (Token) null;
	var condition 	= (AstNode) null;
	var body 		= (AstNode) null;
}
{
	(beginToken = <KW_WHILE>) (condition = Expr()) (body = ExprBlock())?
	{ if (body == null) { body = Parser.astEmptyNode(Parser.span(condition)); } }
	{ return Parser.astLoop(Parser.span(beginToken, body == null ? condition : body), condition, body); }
}

AstNode ExprPrint():
{
	var n 			= (Token) null;
	var nn 			= (Token) null;
	var expr 		= (AstNode) null;
}
{
	(n = <KW_PRINT> | nn = <KW_PRINTLN>) (expr = Expr())?
	{ if (expr == null) { expr = Parser.astEmptyNode(Parser.span(n == null ? nn : n)); } }
	{ return Parser.astPrint(Parser.span(n == null ? nn : n, expr), expr, nn != null); }
}

AstNode ExprTypeAlias():
{
	var beginToken 	= (Token) null;
	var identToken	= (Token) null;
	var valueType 	= (ValueType) null;
}
{
	beginToken = <KW_TYPE>
	identToken = <IDENT>
	<EQ>
	valueType = ValueType()
	{ return Parser.astTypeAlias(Parser.span(beginToken, identToken), identToken.image, valueType); }
}

AstNode ExprIf():
{
	var beginToken 		= (Token) null;
	var conditionals 	= new ArrayList<AstIf.Conditional>();
	var fallthrough 	= (AstNode) null;
	var condition		= (AstNode) null;
	var expression 		= (AstNode) null;
}
{
	(beginToken = <KW_IF>) (condition = Expr()) (expression = ExprBlock())
	{ conditionals.add(Parser.astIfConditional(condition, expression)); }
	(<KW_ELSE> <KW_IF> (condition = Expr()) (expression = ExprBlock()) {conditionals.add(Parser.astIfConditional(condition, expression));})*
	(<KW_ELSE> fallthrough = ExprBlock())?
	{ if( fallthrough == null) { fallthrough = Parser.astEmptyNode(Parser.span(expression)); } }
	{ return Parser.astIf(Parser.span(beginToken, fallthrough), conditionals, fallthrough); }
}

AstNode ExprBlock():
{ 
	var beginToken 	= (Token) null;
	var endToken 	= (Token) null;
	var expr 		= (AstNode) null;
	var body 		= (AstNode) null;
	var semicol 	= (Token) null;
	var stmts 		= new ArrayList<AstNode>();
}
{
	( 
		(beginToken = <LBRACK>)
		(
			{semicol = null;}
			expr = Expr()
			(semicol = <SEMICOL>)?
			{
				if(semicol == null && body == null)
					body = expr;
				else if(semicol != null && body != null)
					throw new RuntimeException("Statement cannot follow last expression in block");
				else if(semicol == null && body != null)
					throw new RuntimeException("Expression cannot follow last expression in block");
				else
					stmts.add(expr);
			}
		)*
		(endToken = <RBRACK>)
	)
	{ 
		if( body == null )
			body = Parser.astEmptyNode(Parser.span(endToken));
		return Parser.astScope(Parser.span(beginToken, endToken), stmts, body);
	}
}

AstNode ExprLOr():
{
	var op 	= (Token) null;
	var l 	= (AstNode) null;
	var r 	= (AstNode) null;
}
{
	l = ExprLAnd() ( 
		(op = <LOR>) r = ExprLAnd()
		{ 
			if( op != null ) {
				l = Parser.astBinOp(AstBinOp.Kind.LOR, l, r);
			}
		}
	)*
	{ return l; }	
}

AstNode ExprLAnd():
{
	var op 	= (Token) null;
	var l 	= (AstNode) null;
	var r 	= (AstNode) null;
}
{
	l = ExprCmp() ( 
		(op = <MULTIAMP>) r = ExprCmp()
		{ 
			if( op != null && op.image.length() == 2 ) {
				l = Parser.astBinOp(AstBinOp.Kind.LAND, l, r);
			}
		}
	)*
	{ return l; }
}

AstNode ExprCmp():
{
	var op 	= (Token) null;
	var l 	= (AstNode) null;
	var r 	= (AstNode) null;
}
{
	l = ExprRel() ( 
		(op = <CMP> | op = <NCMP>) r = ExprRel()
		{ 
			if( op != null ) {
				l = Parser.astBinOp(AstBinOp.Kind.CMP, l, r);
				if(op.kind == NCMP)
					l = Parser.astUnaryOp(AstUnaryOp.Kind.LNOT, l);
			}
		}
	)*
	{ return l; }
}

AstNode ExprRel():
{
	var op 	= (Token) null;
	var l 	= (AstNode) null;
	var r 	= (AstNode) null;
}
{
	l = ExprAddSub() ( 
		(op = <GT> | op = <GTE> | op = <LT> | op = <LTE>) r = ExprAddSub()
		{ 
			if( op != null ) {
				if( op.kind == GT ) { l = Parser.astBinOp(AstBinOp.Kind.GT, l, r);}
				else if( op.kind == GTE ) { l = Parser.astBinOp(AstBinOp.Kind.GTE, l, r); }
				else if( op.kind == LT ) { l = Parser.astBinOp(AstBinOp.Kind.LT, l, r); }
				else if( op.kind == LTE ) { l = Parser.astBinOp(AstBinOp.Kind.LTE, l, r); }
			}
		}
	)*
	{ return l; }
}

AstNode ExprAddSub():
{ 
	var op 	= (Token) null;
	var l 	= (AstNode) null;
	var r 	= (AstNode) null;
}
{
	l = ExprMulDiv() ( 
		(op = <PLUS> | op = <MINUS>) r = ExprMulDiv()
		{ 
			if( op != null ) {
				if( op.kind == PLUS ) { l = Parser.astBinOp(AstBinOp.Kind.ADD, l, r); }
				else { l = Parser.astBinOp(AstBinOp.Kind.SUB, l, r); }
			}
		}
	)*
	{ return l; }	
}

AstNode ExprMulDiv():
{
	var op 	= (Token) null;
	var l 	= (AstNode) null;
	var r 	= (AstNode) null;
}
{
	l = ExprUnary() ( 
		(op = <MUL> | op = <DIV>) r = ExprUnary()
		{
				if( op.kind == MUL ) { l = Parser.astBinOp(AstBinOp.Kind.MUL, l, r); }
				else { l = Parser.astBinOp(AstBinOp.Kind.DIV, l, r); }
		}
	)*
	{ return l; }
}

AstNode ExprUnary():
{ 
	var n 	= (Token) null;
	var k 	= (ArrayList<AstUnaryOp.Kind>) null;
	var t 	= (AstNode) null;
}
{
	( 
		(
			(n = <PLUS> | n = <MINUS> | n = <LNOT> | n = <DEREF>)
			{ 
			if ( k == null ) { k = new ArrayList<>(); }
			if ( n.kind == PLUS ) { k.add(AstUnaryOp.Kind.POS); }
			else if ( n.kind == MINUS ) { k.add(AstUnaryOp.Kind.NEG); }
			else if ( n.kind == LNOT ) { k.add(AstUnaryOp.Kind.LNOT); }
			else if ( n.kind == DEREF ) { k.add(AstUnaryOp.Kind.DEREF); }
			}
		)* 
		t = ExprCall()
	)
	{
		if( k == null ) {
			return t;
		} else {
			AstNode tmp = t;
			for( var kind : k )
				tmp = Parser.astUnaryOp(kind, tmp);
			return tmp;
		}
	}
}

AstNode ExprCall():
{
	var func = (AstNode) null;
	var argument 	= (AstNode) null;
	var arguments 	= new ArrayList<AstNode>();
	var endToken 	= (Token) null;
}
{
	func = ExprField()
	(
		{arguments = new ArrayList<>();}
		<LPAREN>
		(
			argument = Expr() {arguments.add(argument);}
			(<COMMA> argument = Expr() {arguments.add(argument);})*
		)?
		endToken = <RPAREN>
		{func = Parser.astCall(Parser.span(func, endToken), func, arguments);}
	)*
	{ return func; }
}

AstNode ExprField():
{
	var value = (AstNode) null;
	var field = (Token) null;
}
{
	value = ExprLitParenCall()
	( 
		<DOT> field = <IDENT>
		{ value = Parser.astField(Parser.span(value,field), value, field.image); }
	)*
	{ return value; }
}



AstNode ExprLitParenCall():
{
	var n 			= (Token) null;
	var t 			= (AstNode) null;
	var arguments 	= new ArrayList<AstNode>();
	var argument 	= (AstNode) null;
}
{
	( 
		n = <NUM> { return Parser.astNum(Parser.span(n), n.image); } 			|
		n = <KW_TRUE> { return Parser.astBool(Parser.span(n), n.image); }		|
		n = <KW_FALSE> { return Parser.astBool(Parser.span(n), n.image); }		|
		n = <IDENT> { return Parser.astVar(Parser.span(n), n.image); }			|
		n = <STRLIT> { return Parser.astStr(Parser.span(n), n.image); } 		|
		n = <KW_NEW> t = Expr() { return Parser.astNew(Parser.span(n), t); } 	|
		t = ExprFn() { return t; }												|
		t = ExprRec() { return t; }												|
		t = ExprBuiltin() { return t; }											|
		<LPAREN> t = Expr() <RPAREN> { return t; }
	)
}

AstNode ExprFn():
{
	var beginToken 	= (Token) null;
	var name 		= (Token) null;
	var type	 	= (ValueType) null;
	var args 		= new ArrayList<AstFn.Arg>();
	var body  		= (AstNode) null;
}
{
	beginToken = <KW_FN> <LPAREN>
		(
			name = <IDENT> <COL> type = ValueType() { args.add(new AstFn.Arg(name.image, type)); }
			(<COMMA> name = <IDENT> <COL> type = ValueType() { args.add(new AstFn.Arg(name.image, type)); })*
		)?
	{ type = null; }
	<RPAREN> (<ARROW> type = ValueType())? body = ExprBlock()
	{ return Parser.astFn(Parser.span(beginToken, body), args, type, body); }
}

AstNode ExprRec():
{
	var beginToken 	= (Token) null;
	var endToken 	= (Token) null;
	var name 		= (Token) null;
	var value 		= (AstNode) null;
	var fields 		= new ArrayList<Parser.RecordField>();
}
{
	beginToken = <KW_STRUCT>
	<LBRACK>
		(
			name = <IDENT> <EQ> value = Expr() <SEMICOL>
			{ fields.add(new Parser.RecordField(name.image, value)); }
		)*
	endToken = <RBRACK>
	{ return Parser.astRecord(Parser.span(beginToken, endToken), fields); }
}

ValueType ValueType():
{
	var n 			= (Token) null;
	var type 		= (ValueType) null;
	var arguments 	= new ArrayList<ValueType>();
	var returntype 	= (ValueType) null;
	var fields		= new ArrayList<Parser.RecordFieldType>();
}
{
	<TYPE_NUM> { return ValueType.createNumber(); } 	|
	<TYPE_BOOL> { return ValueType.createBoolean(); } 	|
	<TYPE_STR> { return ValueType.createString(); } 	|
	<TYPE_VOID> { return ValueType.createVoid(); } 		|
	n = <MULTIAMP> type = ValueType() 
		{
			ValueType ref = type;
			for(var i = 0; i < n.image.length(); ++i)
				ref = ValueType.createReference(ref);
			type = ref;
			return type;
		} |
	<KW_FN> <LPAREN> 
		(
			type = ValueType() {arguments.add(type);}
			(<COMMA> type = ValueType() {arguments.add(type);})*
		)?
	<RPAREN> (<ARROW> returntype = ValueType())?
		{ return ValueType.createFunction(arguments, returntype == null ? ValueType.createVoid() : returntype); } |
	<KW_STRUCT>
	<LBRACK>
		(
			n = <IDENT> <COL> type = ValueType() <SEMICOL>
			{ fields.add(new Parser.RecordFieldType(n.image, type)); }
		)*
	<RBRACK> { return Parser.createRecordType(fields); } |
	n = <IDENT> { return ValueType.createAlias(n.image); }
}

AstBuiltin ExprBuiltin():
{
	var n 		= (Token) null;
	var a 		= (AstNode) null;
	var args 	= new ArrayList<AstNode>();
}
{
	n = <BUILTIN>
	(
		<LPAREN>
			(
				a = Expr() { args.add(a); }
				(<COMMA> a = Expr() { args.add(a); })*
			)?
		<RPAREN>
	)?
	{ return Parser.astBuiltin(Parser.span(n), n.image.substring(1), args); }
}