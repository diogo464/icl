options {
	STATIC = false;
	LOOKAHEAD = 2;
}

PARSER_BEGIN(CalcParser)
package icl.parser;
import icl.hir.*;
import icl.ast.*;
import icl.type.*;

import java.util.ArrayList;

public class CalcParser {

}

PARSER_END(CalcParser)

SKIP :
{
	" " | "\t" | "\r" | "\n"
}

TOKEN :
{
	< KW_LET	: "let"												> |
	< KW_IF		: "if"												> |
	< KW_ELSE	: "else"											> |
	< KW_WHILE	: "while"											> |
	< KW_MUT	: "mut"												> |
	< KW_TRUE	: "true"											> |
	< KW_FALSE	: "false"											> |
	< KW_FN		: "fn"												> |
	< KW_STRUCT	: "struct"											> |
	< KW_PRINT	: "print"											> |
	< KW_PRINTLN: "println"											> |
	< KW_NEW	: "new"												> |
	< TYPE_INT	: "int"												> |
	< TYPE_BOOL	: "bool"											> |
	< TYPE_STR	: "str"												> |
	< TYPE_VOID	: "void"											> |
	< IDENT		: (["a"-"z", "A"-"Z"](["a"-"z","A"-"Z","0"-"9"])*)	> |
	< NUM		: ((["0"-"9"])+)									> |
	< STRLIT	: "\"" (("\\" ("\\" | "n" | "r" | "\"")) | (~["\\", "\"", "\n", "\r"]))* "\"" > |
	< MULTIAMP	: (["&"])+											> |
	< COMMA		: "," 												> |
	< PLUS		: "+" 												> |
	< MINUS		: "-" 												> |
	< MUL		: "*" 												> |
	< DIV		: "/" 												> |
	< LPAREN	: "("												> |
	< RPAREN	: ")"												> |
	< LBRACK	: "{"												> |
	< RBRACK	: "}"												> |
	< COL		: ":"												> |
	< SEMICOL	: ";"												> |
	< EQ		: "="												> |
	< CMP		: "=="												> |
	< GT		: ">"												> |
	< GTE		: ">="												> |
	< LT		: "<"												> |
	< LTE		: "<="												> |
	< LAND		: "&&"												> |
	< LOR		: "||"												> |
	< LNOT		: "~"												> |
	< DEREF		: "!"												> |
	< ASSIGN	: ":="												> |
	< ARROW		: "->"												>
}

AstNode<Hir> Start():
{ var t = (AstNode<Hir>) null; }
{
	t = Expr() <SEMICOL> <SEMICOL>
	{ return t; }
}

AstNode<Hir> Stmt():
{ AstNode<Hir> n; }
{
	(n = StmtAssign() | n = StmtDecl() | n = StmtWhile() | n = StmtPrint())
	{ return n; }
}

AstNode<Hir> Expr():
{ 
	var n = (AstNode<Hir>) null; 
	var argument = (AstNode<Hir>) null;
	var arguments = new ArrayList<AstNode<Hir>>();
}
{
	(n = ExprBlock() | n = ExprLOr() | n = ExprIf())
	(<LPAREN>
		(argument = Expr() {arguments.add(argument);})
		(<COMMA> argument = Expr() {arguments.add(argument);})*
	<RPAREN> {return Parser.astCall(n, arguments); })?
	{ return n; }
}

AstNode<Hir> StmtAssign():
{
	Token name = null;	
	AstNode<Hir> exp = null;
}
{
	(name = <IDENT>) <ASSIGN> (exp = Expr()) <SEMICOL>
	{ return Parser.astAssign(name, exp); }
}

AstNode<Hir> StmtDecl():
{
	Token mut = null;
	Token ident = null;
	ValueType type = null;
	AstNode<Hir> exp = null;
}
{
	<KW_LET> (mut = <KW_MUT>)? (ident = <IDENT>) (<COL> type = ValueType())? <EQ> (exp = Expr()) <SEMICOL>
	{ return Parser.astDecl(ident, exp, mut != null); }
}

AstNode<Hir> StmtWhile():
{
	var condition = (AstNode<Hir>) null;
	var body = (AstNode<Hir>) null;
}
{
	<KW_WHILE> 	(condition = Expr()) (body = ExprBlock())? <SEMICOL>
	{ if (body == null) { body = Parser.astEmptyNode(); } }
	{ return Parser.astLoop(condition, body); }
}

AstNode<Hir> StmtPrint():
{
	var n = (Token) null;
	var expr = (AstNode<Hir>) null;
}
{
	(n = <KW_PRINT> | n = <KW_PRINTLN>) (expr = Expr())? <SEMICOL>
	{ if (expr == null) { expr = Parser.astEmptyNode(); } }
	{ return Parser.astPrint(n, expr); }
}

AstNode<Hir> ExprIf():
{
	var conditionals 	= new ArrayList<AstIf.Conditional<Hir>>();
	var fallthrough 	= (AstNode<Hir>) null;
	var condition		= (AstNode<Hir>) null;
	var expression 		= (AstNode<Hir>) null;
}
{
	<KW_IF> (condition = Expr()) (expression = ExprBlock())
	{ conditionals.add(Parser.astIfConditional(condition, expression)); }
	(<KW_ELSE> <KW_IF> (condition = Expr()) (expression = ExprBlock()) {conditionals.add(Parser.astIfConditional(condition, expression));})*
	(<KW_ELSE> expression = ExprBlock())?
	{ if( expression == null) { fallthrough = Parser.astEmptyNode(); } else { fallthrough = expression; } }
	{ return Parser.astIf(conditionals, fallthrough); }
}

AstNode<Hir> ExprBlock():
{ 
	AstNode<Hir> stmt = null;
	AstNode<Hir> body = null;
	ArrayList<AstNode<Hir>> stmts = new ArrayList<>();
}
{
	( 
		<LBRACK> 
			(stmt = Stmt() { stmts.add(stmt); })*
			(body = Expr())?
		<RBRACK>
	)
	{ 
		if( body == null )
			body = Parser.astEmptyNode();
		return Parser.astScope(stmts, body);
	}
}

AstNode<Hir> ExprLOr():
{
	Token op = null;
	AstNode<Hir> l = null, r= null;
}
{
	l = ExprLAnd() ( 
		(op = <LOR>) r = ExprLAnd()
		{ 
			if( op != null ) {
				l = Parser.astBinOp(AstBinOp.Kind.LOR, l, r);
			}
		}
	)*
	{ return l; }	
}

AstNode<Hir> ExprLAnd():
{
	Token op = null;
	AstNode<Hir> l = null, r= null;
}
{
	l = ExprCmp() ( 
		(op = <MULTIAMP>) r = ExprCmp()
		{ 
			if( op != null && op.image.length() == 2 ) {
				l = Parser.astBinOp(AstBinOp.Kind.LAND, l, r);
			}
		}
	)*
	{ return l; }
}

AstNode<Hir> ExprCmp():
{
	Token op = null;
	AstNode<Hir> l = null, r= null;
}
{
	l = ExprRel() ( 
		(op = <CMP>) r = ExprRel()
		{ 
			if( op != null ) {
				l = Parser.astBinOp(AstBinOp.Kind.CMP, l, r);
			}
		}
	)*
	{ return l; }
}

AstNode<Hir> ExprRel():
{
	Token op = null;
	AstNode<Hir> l = null, r= null;
}
{
	l = ExprAddSub() ( 
		(op = <GT> | op = <GTE> | op = <LT> | op = <LTE>) r = ExprAddSub()
		{ 
			if( op != null ) {
				if( op.kind == GT ) { l = Parser.astBinOp(AstBinOp.Kind.GT, l, r);}
				else if( op.kind == GTE ) { l = Parser.astBinOp(AstBinOp.Kind.GTE, l, r); }
				else if( op.kind == LT ) { l = Parser.astBinOp(AstBinOp.Kind.LT, l, r); }
				else if( op.kind == LTE ) { l = Parser.astBinOp(AstBinOp.Kind.LTE, l, r); }
			}
		}
	)*
	{ return l; }
}

AstNode<Hir> ExprAddSub():
{ 
	Token op = null;
	AstNode<Hir> l = null, r = null;
}
{
	l = ExprMulDiv() ( 
		(op = <PLUS> | op = <MINUS>) r = ExprMulDiv()
		{ 
			if( op != null ) {
				if( op.kind == PLUS ) { l = Parser.astBinOp(AstBinOp.Kind.ADD, l, r); }
				else { l = Parser.astBinOp(AstBinOp.Kind.SUB, l, r); }
			}
		}
	)*
	{ return l; }	
}

AstNode<Hir> ExprMulDiv():
{
	Token op = null;
	AstNode<Hir> l = null, r = null;
}
{
	l = ExprUnary() ( 
		(op = <MUL> | op = <DIV>) r = ExprUnary()
		{
				if( op.kind == MUL ) { l = Parser.astBinOp(AstBinOp.Kind.MUL, l, r); }
				else { l = Parser.astBinOp(AstBinOp.Kind.DIV, l, r); }
		}
	)*
	{ return l; }
}

AstNode<Hir> ExprUnary():
{ 
	Token n = null;
	ArrayList<AstUnaryOp.Kind> k = null;
	AstNode<Hir> t = null;
}
{
	( 
		(
			n = <PLUS> | n = <MINUS> | n = <LNOT> | n = <DEREF>
			{ 
			if ( k == null ) { k = new ArrayList<>(); }
			if ( n.kind == PLUS ) { k.add(AstUnaryOp.Kind.POS); }
			else if ( n.kind == MINUS ) { k.add(AstUnaryOp.Kind.NEG); }
			else if ( n.kind == LNOT ) { k.add(AstUnaryOp.Kind.LNOT); }
			else if ( n.kind == DEREF ) { k.add(AstUnaryOp.Kind.DEREF); }
			}
		)* 
		t = ExprLitParenCall() 
	)
	{
		if( k == null ) {
			return t;
		}else {
			AstNode<Hir> tmp = t;
			for( var kind : k )
				tmp = Parser.astUnaryOp(kind, tmp);
			return tmp;
		}
	}
}

AstNode<Hir> ExprLitParenCall():
{
	var n 			= (Token) null;
	var t 			= (AstNode<Hir>) null;
	var arguments 	= new ArrayList<AstNode<Hir>>();
	var argument 	= (AstNode<Hir>) null;
}
{
	( 
		n = <NUM> { return Parser.astNum(n); } 					|
		n = <KW_TRUE> { return Parser.astBool(n); }				|
		n = <KW_FALSE> { return Parser.astBool(n); }			|
		n = <IDENT> { return Parser.astVar(n); }				|
		n = <STRLIT> { return Parser.astStr(n); } 				|
		n = <KW_NEW> t = Expr() { return Parser.astNew(n,t); } 	|
		t = ExprFn() { return t; }								|
		<LPAREN> t = Expr() <RPAREN> { return t; }
	)
}

AstNode<Hir> ExprFn():
{
	var n 			= (Token) null;
	var name 		= (Token) null;
	var type	 	= (ValueType) null;
	var args 		= new ArrayList<AstFn.Arg>();
	var body  		= (AstNode<Hir>) null;
}
{
	n = <KW_FN> <LPAREN>
		(
			name = <IDENT> <COL> type = ValueType() { args.add(new AstFn.Arg(name.image, type)); }
			(<COMMA> name = <IDENT> <COL> type = ValueType() { args.add(new AstFn.Arg(name.image, type)); })*
		)?
	{ type = null; }
	<RPAREN> (<ARROW> type = ValueType())? body = ExprBlock()
	{ return Parser.astFn(n, args, type, body); }
}

ValueType ValueType():
{
	var n = (Token) null;
	var type = (ValueType) null;
	var arguments = new ArrayList<ValueType>();
	var returntype = (ValueType) null;
}
{
	<TYPE_INT> { return ValueType.createNumber(); } 	|
	<TYPE_BOOL> { return ValueType.createBoolean(); } 	|
	<TYPE_STR> { return ValueType.createString(); } 	|
	<TYPE_VOID> { return ValueType.createVoid(); } 		|
	n = <MULTIAMP> type = ValueType() 
		{
			ValueType ref = type;
			for(var i = 0; i < n.image.length(); ++i)
				ref = ValueType.createReference(ref);
			type = ref;
			return type;
		} |
	<KW_FN> <LPAREN> 
		(
			type = ValueType() {arguments.add(type);}
			(<COMMA> type = ValueType() {arguments.add(type);})*
		)?
	<RPAREN> (<ARROW> returntype = ValueType())?
		{ return ValueType.createFunction(arguments, returntype); }
}
