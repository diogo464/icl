{
	type vec3 = struct { x: number; y: number; z: number; };
	let vec3 = {
		let show 	= fn(v:vec3) { 
			print "["; print v.x; print ", "; print v.y;
			print ", "; print v.z; print "]";
		};
		let showl	= fn(v:vec3) {
			show(v);
			println;
		};
		let create 	= fn(x:number, y:number, z:number) -> vec3 {
			struct { x = x; y = y; z = z; }
		};
		let zero	= fn() -> vec3 { create(0,0,0) };
		let scale	= fn(v: vec3, s: number) -> vec3 {
			create(v.x * s, v.y * s, v.z * s)
		};
		let dot		= fn(v1: vec3, v2: vec3) -> number {
			v1.x * v2.x + v1.y * v2.y + v1.z * v2.z
		};
		let abs 	= fn(v: vec3) -> vec3 {
			create($abs(v.x), $abs(v.y), $abs(v.z))
		};
		let len		= fn(v: vec3) -> number { $sqrt(dot(v,v)) };
		let len2	= fn(v: vec3) -> number { dot(v,v) };
		let normalized = fn(v: vec3) -> vec3 {
			let l = len(v);
			if l == 0 { zero() }
			else { scale(v, 1/l) }
		};
		let add		= fn(v1: vec3, v2: vec3) -> vec3 {
			create(v1.x+v2.x, v1.y+v2.y, v1.z+v2.z)
		};
		let sub		= fn(v1: vec3, v2: vec3) -> vec3 {
			create(v1.x-v2.x, v1.y-v2.y, v1.z-v2.z)
		};
		let neg 	= fn(v: vec3) -> vec3 { scale(v, -1) };
		struct { show; showl; create; zero; scale; dot; abs; len; len2; normalized; add; sub; }
	};

	type ray = struct { origin: vec3; dir: vec3; };
	let ray = {
		let create 	= fn(origin: vec3, dir: vec3) -> ray { 
			struct { origin; dir = vec3.normalized(dir); } 
		};
		let show 	= fn(r: ray) { print "[origin="; vec3.show(r.origin); print ",dir="; vec3.show(r.dir); print "]"; };
		let showl 	= fn(r: ray) { show(r); println; };
		let at		= fn(r: ray, t: number) -> vec3 { vec3.add(r.origin, vec3.scale(r.dir, t)) };
		struct { create; show; showl; at; }
	};

	type traceres = struct { hit: bool; pos: vec3; norm: vec3; };
	let traceres = {
		let hit = fn(pos: vec3, norm: vec3) -> traceres { struct { hit = true; pos; norm; } };
		let miss = fn() -> traceres { struct { hit = false; pos = vec3.zero(); norm = vec3.zero(); } };
		struct { hit; miss; }
	};

	let geom = {
		type quadratic = struct { present: bool; s1: number; s2: number; };
		let quadratic = fn(a: number, b: number, c: number) -> quadratic {
			let descriminant = b * b - 4 * a * c;
			if descriminant < 0 {
				struct { present = false; s1 = 0; s2 = 0; }
			} else {
				let s1 = (-b - $sqrt(descriminant)) / (2 * a);
				let s2 = (-b + $sqrt(descriminant)) / (2 * a);
				struct { present = true; s1; s2; }
			}
		};

		let sphere 	= fn(r: ray, center: vec3, radius: number) -> traceres {
			let f = vec3.sub(r.origin, center);
			if vec3.dot(f, r.dir) > 0 { traceres.miss() }
			else {
				let b = 2 * vec3.dot(r.dir, f);
				let c = vec3.len2(f) - $pow(radius,2);
				let q = quadratic(1, b, c);

				if q.present {
					let t = $min(q.s1, q.s2);
					let hitpos = ray.at(r, t);
					let normal = vec3.normalized(vec3.sub(hitpos, center));
					traceres.hit(hitpos, normal)
				} else { traceres.miss() }
			}
		};
		struct { sphere; }
	};

	let colors = struct {
		white 	= vec3.create(1, 1, 1);
		red 	= vec3.create(1, 0, 0);
		green 	= vec3.create(0, 1, 0);
		blue 	= vec3.create(0, 0, 1);
	};

	let world = {

	};

	fn() {
		let fixcolor = fn(c: vec3) { vec3.scale(c, 255); };
		let printcolor = fn(c: vec3) {
			let scaled = vec3.scale(c, 255);	
			printd scaled.x; print " "; printd scaled.y; print " "; printd scaled.z; println;
		};

		let sky_color = fn(r: ray) -> vec3 {
			let ud = vec3.normalized(r.dir);
			let t = 0.5 * (ud.y + 1.0);
			vec3.add(
				vec3.scale(colors.white, 1.0 - t),
				vec3.scale(vec3.create(0.5, 0.7, 1.0), t)
			)
		};

		let ray_color = fn(r: ray) -> vec3 {
			let trace = geom.sphere(r, vec3.create(0, 0, -1), 0.5);
			if trace.hit {
				vec3.abs(trace.norm)
			} else {
				sky_color(r)
			}
		};

		let aspect_ratio = 16 / 9;
		let width = 400;
		let height = width // aspect_ratio;
		let viewport_height = 2.0;
		let viewport_width = viewport_height * aspect_ratio;
		let focal_length = 1.0;

		let origin = vec3.create(0, 0, 0);
    	let horizontal = vec3.create(viewport_width, 0, 0);
    	let vertical = vec3.create(0, viewport_height, 0);
		let lower_left_corner = vec3.sub(
			vec3.sub(
				vec3.sub(origin, vec3.scale(horizontal, 0.5)),
				vec3.scale(vertical, 0.5)
			),
			vec3.create(0, 0, focal_length)
		);

		println "P3";
		printd width; print " "; printd height; println;
		println "255";
		let mut y = height;
		while y >= 0 {
			let mut x = 0;
			while x < width {
				let u = x / (width - 1);
            	let v = y / (height - 1);
				let dir = vec3.add(
					vec3.add(
						lower_left_corner,
						vec3.scale(horizontal, u)
					),
					vec3.sub(
						vec3.scale(vertical, v),
						origin
					)
				);
				let r = ray.create(origin, dir);
				let color = ray_color(r);
				printcolor(color);

				x := x + 1;
			};
			y := y - 1;
		};
	}();
};;
